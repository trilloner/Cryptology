package algorithm;

import java.io.Serializable;
import java.math.BigInteger;
import java.util.List;

/** Лабораторна робота №3 - алгоритм RSA */

public interface RSA extends Serializable {
    /*
     Шифрує повідомлення по формулі C = M^e mod n, де:
     C - зашифроване повідомлення
     M - повідомлення, яке потрібно зашифрувати
     e - взаємно просте число до фі
     n - ділення з остачею взяте з p*q

     Повертає зашифроване повідомлення представлене за допомогою BigInteger
    */
    BigInteger encrypt(BigInteger bigInteger);

    /*
     Шифрує повідомлення використовуючи метод encrypt,
     перевіряючи чи блоки повідомлення є дійсними

     Повертає список зашифрованих блоків повідомлення, де кожен блок представлений за допомогою BigInteger
    */
    List<BigInteger> encryptMessage(final String message);


    /*
     Розшифровує зашифроване повідомлення по формулі M = C^d mod n, де:
     M - розшифроване повідомлення
     C - зашифроване повідомлення
     d - закритий ключ, отриманий як мультиплікативно обернене число до числа е по модулю фі
     n - ділення з остачею взяте з p*q

     Повертає розшифроване повідомлення представлене за допомогою BigInteger
    */
    BigInteger decrypt(BigInteger encrypted);

    /*
     Розшифровує список зашифрованих повідомлень по формулі M = C^d mod n, де:
     M - розшифроване повідомлення
     C - зашифроване повідомлення
     d - закритий ключ, отриманий як мультиплікативно обернене число до числа е по модулю фі
     n - ділення з остачею взяте з p*q

     Повертає список розшифрованих повідомлень
    */
    List<BigInteger> decryptMessages(List<BigInteger> encryption);

    /*
     Робить цифровий пілпис для повідомлення по формулі A = M^d mod n, де:
     А - цифровий підпис повідомлення
     M - повідомлення, яке потрібно підписати
     d - закритий ключ, отриманий як мультиплікативно обернене число до числа е по модулю фі
     n - ділення з остачею взяте з p*q

     Повертає підписане повідомлення представлене за допомогою BigInteger
    */
    BigInteger sign(BigInteger bigInteger);

    /*
     Підписує повідомлення використовуючи метод sign,
     перевіряючи чи блоки повідомлення є дійсними

     Повертає список підписаних блоків повідомлення, де кожен блок представлений за допомогою BigInteger
    */
    List<BigInteger> signMessage(final String message);

    /*
     Верифікує підписане повідомлення по формулі A^e mod n = M, де:
     A - підписане повідомлення
     e - взаємно просте число до фі
     n - ділення з остачею взяте з p*q
     М - початкове повідомлення

     Повертає десяткове число - результат верифікаці,
     якщо воно дорівнює десятковому представленню початкового повідомлення,
     то це означає, що підписане повідомлення успішно верифіковано
    */
    BigInteger verifySignedMessage(BigInteger signedMessage);

    /*
     Верифікує список підписаних повідомлень за допомогою методу verify
     Повертає список верифікованих повідомлень
    */
    List<BigInteger> verify(List<BigInteger> signedMessages);

    /*
     Повертає true, якщо десяткове представлення початкового повідомлення
     співпадає з десятковим представленням підписаного повідомлення,
     в іншому випадку, повертає false
    */
    boolean isVerified(BigInteger signedMessage, BigInteger message);

    /*
     Повертає десяткове преставлення повідомлення
    */
    List<BigInteger> messageToDecimal(final String message);
}
